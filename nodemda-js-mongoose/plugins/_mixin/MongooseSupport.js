"use strict";

/*
 * MongooseSupport.js
 * Contains code that applies to the Entity class types generated by this
 * mongoose-js plugin.
 */
var MongooseSupport = {};

(function() {

    MongooseSupport.initStereotype = function(context, stereotype) {

        let model = context.model;

        model.mixin({
            onAttribute: [ 
               { get: [
                    function mongooseType() {
                        if (this.isEntity) {
                            if (this.isArray) {
                                return `{ type: mongoose.ObjectId, ref: '${this.type.metaClass.name}' }`;
                            }
                            else {
                                return `mongoose.ObjectId, ref: '${this.type.metaClass.name}'`;
                            }
                        }
                        else if (this.mongooseSubDoc) {
                            return `${this.type.metaClass.name.toLowerCase()}Schema`;
                        }
                        else {
                           return `'${this.type.mongooseType}'`;
                        }
                    },

                    function mongooseSubDoc() {
                        if (this.isObject) {
                            let metaClass = this.type.metaClass;
                            if (metaClass.stereotypeName === 'ValueObject' || metaClass.stereotypeName === 'POJO') {
                                return true;
                            }
                        }

                        return false;
                    },

                ]},
                 
            ],

            onClass: { 
                get: [
                    /**
                     * Returns a string to be passed to the select() method of a
                     * Mongoose query when retrieving a group of records in the getAllXX()
                     * REST handler.  null is returned if no query is needed.
                     */
                    function mongooseSelect() {
                        if (this.tableColumnsInvisible > 0) {
                            // We need to select a subset of columns...
                            let columns = [];
                            if (this.tableColumnsVisible <= this.tableColumnsInvisible) {
                                // Be explicit about which columns to include...
                                columns.push('_id');
                                this.attributes.forEach(function (attrib) {
                                    if (attrib.visibleToTable) {
                                        columns.push(attrib.jsIdentifierName);
                                    }
                                });
                            }
                            else {

                                // Be explicit about which columns to exclude...
                                this.attributes.forEach(function (attrib) {
                                    if (!attrib.visibleToTable) {
                                        columns.push(`-${attrib.jsIdentifierName}`);
                                    }
                                });
                            }

                            return `'${columns.join(' ')}'`;
                        }
                        return null;
                    },

 					/**
					* Returns a list of all POJO objects that are referenced
					* by this class.
					*/ 
					function embeddedClasses() {

						let embedded = [];

						this.attributes.forEach(function (attribute) {
							if (attribute.mongooseSubDoc) {
								embedded.push(attribute.type.metaClass);
							}
						});

						return embedded;
					},


					/**
					* Returns a list of all attributes that have a data type that
					* is an entity class
					*/ 
					function entityAttribs() {

						let attribs = [];

						this.attributes.forEach(function (attrib) {
							if (attrib.isEntity) {
								attribs.push(attrib);
							}
						});

						this.virtuals.forEach(function (attrib) {
							if (attrib.isEntity) {
								attribs.push(attrib);
							}
						});

						return attribs;
					},
                    
					function isUserEntity() {
						return this.stereotypeName === 'Entity' && this.name === 'User';
					},
                ] 
            },

        }); // end mixin

    };

    
})();

module.exports = MongooseSupport;
