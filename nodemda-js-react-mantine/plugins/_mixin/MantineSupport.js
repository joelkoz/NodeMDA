"use strict";

const NodeMDA = require("nodemda");
const _ = require('lodash');
const camelToWords = require('nodemda-standards/_helpers/camelToWords');

/*
 * MantineSupport.js
 * Contains code that applies to the Entity class types generated by this
 * koa-react plugin.
 */
var MantineSupport = {};

(function() {

	MantineSupport.initStereotype = function(context, stereotype) {

		if (stereotype.name !== 'Entity') {
			return;
		}
		let model = context.model;

		console.log("Configuring Entities for Mantine UI...");

		model.mixin({

			onAttribute: [ 
			   { get: [

					function mantineInputTag() {
						if (this.isArray && this.type.isEnum) {
							return 'MultiSelect';
						}
						else {
						   return this.type.mantineInputTag;
						}
					},

				   function mantineDataLabel() {
						return camelToWords(this.name);
				   },

				   function mantineValueSuffix() {
						if (this.type.name == 'YesNo') {
							return ' ? "Yes" : "No"';
						}
						else if (this.type.name == 'OnOff') {
							return ' ? "On" : "Off"';
						}
						return '';
				   },


				   function mantineDefaultValue() {
						if (this.type.name == 'YesNo') {
							return this.defaultValue ? "'Yes'" : "'No'";
						}
						else if (this.type.name == 'OnOff') {
							return this.defaultValue ? "'On'" : "'Off'";
						}

						return this.jsDefaultValue;
				   },

				   function visibleToForm() {
					  return this.isPublic && !this.isTaggedAs('uiExclude');
				   },

				   function visibleToTable() {
					  return this.isTaggedAs('uiTableColumn');
				   },

				   function useArrayEditor() {
					   return this.isArray && !this.type.isEnum;
				   }
				]},

			],

			onClass: { 
				get: [
					/**
					* Returns a list of all attributes should be included
					* on any input forms generated for this class.
					*/ 
					function formAttribs() {
						let attribs = [];

						this.attributes.forEach(function (attrib) {
							if (attrib.visibleToForm) {
								attribs.push(attrib);
							}
						});

						this.virtuals.forEach(function (attrib) {
							if (attrib.visibleToForm) {
								attribs.push(attrib);
							}
						});

						return attribs;
					},

					/**
					* Returns a list of all attributes should be included
					* on any table generated for this class.
					*/
					function tableAttribs() {
						let attribs = [];

						this.attributes.forEach(function (attrib) {
							if (attrib.visibleToTable) {
								attribs.push(attrib);
							}
						});

						return attribs;
					},

				] 
			},

		}); // end mixin

		// Make sure there are attributes in each Entity class that are tagged as
		// "uiTableColumn".  If NO attributes have the explicit tag, then ALL
		// attributes get the tag.
		model.classes.forEach(function (metaClass) {
			if (metaClass.stereotypeName === 'Entity') {

				// Count the visibleToTable attributes
				let visibleCount = 0;
				let invisibleCount = 0;
				metaClass.attributes.forEach(function (attrib) {
					if (attrib.visibleToTable) {
						visibleCount++;
					}
					else {
						invisibleCount++;
					}
				});

				// If there are NO explicit visibleToTable attributes, then
				// default to ALL primative types with multiplicity of 1 that
				// are visibleToForm
				if (visibleCount === 0) {
					invisibleCount = 0;
					metaClass.attributes.forEach(function (attrib) {
						if (attrib.visibleToForm && !attrib.isMany && !attrib.isObject) {
							attrib.addTag(new NodeMDA.Meta.Tag("uiTableColumn", true));
							visibleCount++;
						}
						else {
							invisibleCount++;
						}
					});
				}

				metaClass.tableColumnsVisible = visibleCount;
				metaClass.tableColumnsInvisible = invisibleCount;
			}
		});

	};

	
})();

module.exports = MantineSupport;
