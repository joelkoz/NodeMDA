#!/usr/bin/env node
'use strict';

const program = require('commander');
const NodeMDA = require('nodemda');
const path = require('path');
const fsx = require('fs-extra');
const winston = require('winston');
const glob = require('glob');
const _ = require('lodash');
const Handlebars = require('handlebars');
const prompt = require('prompt-sync')();

var pluginDefs;

/**
* Returns a list of all discovered plugins...
*/
function getPlugins() {


	function discoverPlugins(filePath) {
		var fileList = glob.sync(filePath);
		fileList.forEach(function (fileName) {
			let plugin = require(fileName);
			if (plugin.type === 'platform') {
				pluginDefs.platforms[plugin.name] = plugin;
			}
			else if (plugin.type === 'reader') {
				pluginDefs.readers[plugin.name] = plugin;
			}
		});
	};


	if (typeof pluginDefs === 'undefined') {

		pluginDefs = {};
		pluginDefs.platforms = {};
		pluginDefs.readers = {};

		let localPath = process.cwd() + '/node_modules/nodemda-*';
		discoverPlugins(localPath);

		let nodeMDADir = NodeMDA.getNodeMDADir();
		let nmi = nodeMDADir.indexOf('node_modules');
		if (nmi >= 0) {
			nodeMDADir = nodeMDADir.slice(0, nmi+12);
		}

		discoverPlugins(nodeMDADir + '/nodemda-*');
	}

	return pluginDefs;
}



program
   .version('1.0.0');

program
   .command('generate')
   .alias("gen")
   .usage("nodemda generate [options]")
   .description("Generate code from the specified model file")
   .option('-p, --platform <platformName>','Name of the platform plugin to use')
   .option('-o, --output <outputDirectory>','The output directory')
   .option('-r, --reader <readerModuleName>','Name of a module that will act as the NodeMDA.Reader')
   .option('-m, --model <modelFileName>', 'The name of the UML model to process')
   .option('-l, --log <logLevel>', 'The name of the Winston log level to display during code generation')
   .option('--forceOverwrite','Causes NodeMDA to overwrite ALL files as if the project were new')
   .action(function(cmd) {

   				NodeMDA.loadOptions();

                if (cmd.platform) {
                    NodeMDA.Options.platform = cmd.platform; 
				}
				
				if (cmd.output) {
					NodeMDA.Options.output = cmd.output;				
				}

				if (cmd.reader) {
					NodeMDA.Options.readerName = cmd.reader;
				}

				if (cmd.model) {
					NodeMDA.Options.modelFileName = cmd.model;
				}

				if (cmd.forceOverwrite) {
					NodeMDA.Options.forceOverwrite = true;				
				}

				if (cmd.logLevel) {
					winston.level = cmd.logLevel;				
				}

				NodeMDA.Meta.Reader = require(NodeMDA.Options.readerName).reader;			
				
    			NodeMDA.gen(NodeMDA.Options.modelFileName);
			});

program
	.command('init')
    .description("Initialize current directory for project development")
    .option('-p, --platform <platformName>','Name of the platform plugin to use')
    .option('-o, --output <outputDirectory>','The output directory')
    .option('-r, --reader <readerModuleName>','Name of a module that will act as the NodeMDA.Reader')
    .option('-m, --model <modelFileName>')
	.action(function(cmd) {

		console.log('NodeMDA project initialization.');
		console.log('-------------------------------');

		let projectName = path.basename(process.cwd());
		let answer = prompt(`Project name (${projectName}): `);
		if (answer) {
			projectName = answer;
		}

        if (cmd.platform) {
            NodeMDA.Options.platform = cmd.platform; 
		}
		else {
			let availablePlatforms = getPlugins().platforms;
			let platforms = [];
			let i = 0;
			console.log('\nAvailable platforms:');
			for (let prop in availablePlatforms) {
				let platform = availablePlatforms[prop];
				platforms.push(platform);
				i++;
				console.log(`  ${i}. ${platform.name}: ${platform.desc}`);
			}

			if (platforms.length === 0) {
				console.log('\n No platform plugins discovered. Use NPM to install nodemda plugins');
	    		process.exit(-1);
			}
			else if (platforms.length === 1) {
				// Only one platform to chose from - use it...
				NodeMDA.Options.platform = platforms[0].name;
			}
			else {
				let answer = prompt('\nPlatform to generate: ');
				let choice = parseInt(answer, 0);
				NodeMDA.Options.platform = platforms[choice-1].name;
			}

		}

		console.log('\nUsing platform ' + NodeMDA.Options.platform);

		
		if (cmd.output) {
			NodeMDA.Options.output = cmd.output;				
		}

		if (cmd.reader) {
			NodeMDA.Options.readerName = 'nodemda-' + cmd.reader;
		}
		else {
			let availableReaders = getPlugins().readers;
			let readers = [];
			let i = 0;
			console.log('\nAvailable readers:');
			for (let prop in availableReaders) {
				let reader = availableReaders[prop];
				readers.push(reader);
				i++;
				console.log(`  ${i}. ${reader.name}: ${reader.desc}`);
			}

			if (readers.length === 0) {
				console.log('\n No UML reader plugins discovered. Use NPM to install nodemda plugins');
	    		process.exit(-1);
			}
			else if (readers.length === 1) {
				// Only one platform to chose from - use it...
				NodeMDA.Options.readerName = 'nodemda-' + readers[0].name;
			}
			else {
				let answer = prompt('\nPlatform to generate: ');
				let choice = parseInt(answer, 0);
				NodeMDA.Options.readerName = 'nodemda-' + readers[choice-1].name;
			}

		}

		console.log('\nUsing reader ' + NodeMDA.Options.readerName);

		// Make sure the platform is valid...
		try {
		   NodeMDA.getPlatformDir();
		}
		catch (error) {
			console.log(`\n\n**Init failed** - can not use platform plugin ${NodeMDA.Options.platform}: ${error.message}\n\n`);
			return;
		}

		// See if a model file exists...
		let modelTemplateDir = NodeMDA.getPlatformDir() + '/_model';
		if (fsx.existsSync(modelTemplateDir)) {
			// Copy to the project directory...
			let modelProjectDir = './model';
			fsx.ensureDirSync(modelProjectDir);

			let sourceFileList = glob.sync(modelTemplateDir + '/*');
			let sourceFile = sourceFileList[0];

			let sourceParts = path.parse(sourceFile);

			let modelFile = _.camelCase(projectName)
			let targeFile = modelProjectDir + '/' + modelFile + sourceParts.ext;

			// Use Handlebars to copy over the file model, merging in the
			// project name if necessary.
			let modelContents = fsx.readFileSync(sourceFile, "utf8");
	    	let render;
	    	let result;
	    	try {
	    	   render = Handlebars.compile(modelContents);
	    	   result = render({ AppName: _.upperFirst(_.camelCase(projectName)) });
	    	}
	    	catch (error) {
	    		winston.error(`Render error in model file ${sourceFile}:\n--- ${error.message}`);
	    		process.exit(-1);
	    	}			
        	fsx.writeFileSync(targeFile, result);

			NodeMDA.Options.modelFileName = targeFile;
		}

		NodeMDA.writeOptions();
		console.log('\nOptions saved to nodemda.json');
		if (NodeMDA.Options.modelFileName !== null) {
		    console.log('\nUML model file was created at ' + NodeMDA.Options.modelFileName);
		}
	});


program
	.command('dirs')
    .description("Shows the absolute paths to the directories that NodeMDA will use when generating code.")
    .option('-p, --platform <platformName>','Name of the platform plugin to use')
    .option('-o, --output <outputDirectory>','The output directory')
    .option('-m, --model <modelFileName>')
	.action(function(cmd) {

		NodeMDA.loadOptions();

        if (cmd.platform) {
            NodeMDA.Options.platform = cmd.platform; 
		}

		if (cmd.output) {
			NodeMDA.Options.output = cmd.output;				
		}

		if (cmd.model) {
			NodeMDA.Options.modelFileName = cmd.model;
		}


		console.log(`Current working directory is ${process.cwd()}`);
		console.log(`This nodemda CLI is running from ${__dirname}`);
		console.log(`NodeMDA is running from ${NodeMDA.getNodeMDADir()}`);

		try {
		   console.log(`The platform ${NodeMDA.Options.platform} is located at ${NodeMDA.getPlatformDir()}`);
		}
		catch (error) {
			console.log(`\n\n**ERROR** - can not use platform plugin ${NodeMDA.Options.platform}: ${error.message}\n\n`);
		}

		if (NodeMDA.Options.modelFileName) {
			let modelPath = path.resolve(NodeMDA.Options.modelFileName);
			if (fsx.existsSync(modelPath)) {
				console.log(`UML model is located at ${modelPath}`);
		    }
		    else {
				console.log(`\n\n**ERROR** - the UML model location does not exist! Not found at ${modelPath}`);
		    }
		}
		else {
			console.log('\n\n**ERROR** - no UML model file name specified.');
		}

	    let outputPath = path.resolve(NodeMDA.Options.output);
		if (fsx.existsSync(outputPath)) {
			console.log(`Output will be written to ${outputPath}`);
		}
		else {
			console.log(`\n\n**ERROR** - the output directory does not exist! Not found at ${outputPath}`);
		}

	});


	program
	.command('platforms')
    .description("Lists the available platforms that NodeMDA can use.")
	.action(function(cmd) {

		let availablePlatforms = getPlugins().platforms;
		console.log('\nAvailable platforms:');
		for (let prop in availablePlatforms) {
			let platform = availablePlatforms[prop];
			console.log(`o ${platform.name}: ${platform.desc}`);
		}
	});

	
	program
	.command('readers')
    .description("Lists the available file readers that NodeMDA can use.")
	.action(function(cmd) {

		let availableReaders = getPlugins().readers;
		console.log('\nAvailable readers:');
		for (let prop in availableReaders) {
			let reader = availableReaders[prop];
			console.log(`o ${reader.name}: ${reader.desc}`);
		}
	});



program.parse(process.argv);


if (!process.argv.slice(2).length) {
   program.outputHelp();
}
