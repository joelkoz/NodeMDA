##output overwrite {{@root.output}}/backend/index.js
// This file was generated with NodeMDA. It will be overwritten if generated again.
// Do not modify this file.
//
require('dotenv').config(); // Load environment variables from .env

const Koa = require('koa');
const bodyParser = require('koa-bodyparser');
const mongoose = require('mongoose');
const serve = require('koa-static');
const path = require('path');
const loginRoutes = require('./routes/login');
{{#each entityRouteImport as |routeImport|}}
{{{routeImport}}}
{{/each}}
const User = require("./models/user.js")
const { jwtMiddleware } = require('./config/auth');

const app = new Koa();

if (process.env.NODE_ENV === 'development') {

  // When developing locally, allow from CORS calls on a different port
  const cors = require('@koa/cors');
  const allowedOrigin = process.env.FRONTEND_URL || 'http://localhost:3000';


  console.log(`Development mode: Enabling CORS from ${allowedOrigin}`);

  app.use(cors({
    origin: allowedOrigin,  // Set the allowed origin from environment variable
    credentials: true,  // Allow credentials (e.g., cookies, authorization headers)
  }));
}

const MONGODB_URI = process.env.MONGODB_URI;

// Connect to MongoDB
mongoose.connect(MONGODB_URI, {
  useNewUrlParser: true,
  useUnifiedTopology: true,
}).then(() => {
  console.log('Connected to MongoDB');

  // Make sure server has an admin entry
  // Ensure there is at least one "admin" user in the database
  User.findOne({ username: 'admin' }).then((user) => {
    if (!user) {
      const adminUser = new User({
        username: 'admin',
        password: '1234',
        email: 'admin@example.com',
        roles: ['admin'],
      });

      adminUser.save().then(() => {
        console.log('Admin user created with username "admin"');
      }).catch((error) => {
        console.error('Error creating admin user:', error);
      });
    } else {
      console.log('Admin user already exists');
    }
  }).catch((error) => {
    console.error('Error checking for admin user:', error);
  });

}).catch((error) => {
  console.error('Error connecting to MongoDB:', error);
});

app.use(bodyParser());

// Global authentication middleware
app.use(async (ctx, next) => {
  if (ctx.path.startsWith('/api/v1/register') || ctx.path.startsWith('/api/v1/login')) {
    await next();
  } else {
    await jwtMiddleware(ctx, next);
  }
});

app.use(async (ctx, next) => {
  if (!ctx.state.user) {
     // No user has been authenticated. Create the "guest" user
     ctx.state.user = {
       roles: ['guest']
     };
  } 
  await next();
});


// Prefix API routes with /api/v1
app.use(loginRoutes.routes()).use(loginRoutes.allowedMethods());
{{#each model.entities as |entity|}}
app.use({{lowercase entity.name}}Routes.routes()).use({{lowercase entity.name}}Routes.allowedMethods());
{{/each}}

// Start the server on port 4000
app.listen(4000, () => {
  console.log('Backend server is running on http://localhost:4000');
});
