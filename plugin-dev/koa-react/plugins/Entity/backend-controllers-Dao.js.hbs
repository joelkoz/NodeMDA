##output overwrite {{@root.output}}/backend/controllers/{{class.packageDirPath}}{{class.name}}Dao.js
// This file was generated with NodeMDA. It will be overwritten if generated again.
// Do not modify this file.
//
const {{class.name}} = require('{{class.relativeParentPrefix}}/models/{{class.packageDirPath}}{{lowercase class.name}}');

// Get all {{lowercase class.pluralName}} with pagination
exports.getAll{{class.pluralName}} = async (ctx) => {
  const { page = 1, limit = 10 } = ctx.query;

  try {
    const {{lowercase class.pluralName}} = await {{class.name}}.find()
      .skip((page - 1) * limit)
      .limit(parseInt(limit, 10));

    const total = await {{class.name}}.countDocuments();

    ctx.body = { {{lowercase class.pluralName}}, total, page: parseInt(page, 10), limit: parseInt(limit, 10) };
  } catch (error) {
    ctx.throw(500, 'Error fetching {{lowercase class.pluralName}}');
  }
};

// Get a {{lowercase class.name}} by ID
exports.get{{class.name}}ById = async (ctx) => {
  try {
    const {{lowercase class.name}} = await {{class.name}}.findById(ctx.params.id);
    if (!{{lowercase class.name}}) {
      ctx.throw(404, '{{class.name}} not found');
    }
    ctx.body = {{lowercase class.name}};
  } catch (error) {
    ctx.throw(400, 'Invalid ID');
  }
};

// Create a new {{lowercase class.name}}
exports.create{{class.name}} = async (ctx) => {
  try {
    const {{lowercase class.name}} = new {{class.name}}(ctx.request.body);
    await {{lowercase class.name}}.save();
    ctx.status = 201;
    ctx.body = {{lowercase class.name}};
  } catch (error) {
    ctx.throw(400, 'Invalid data');
  }
};

// Update a {{lowercase class.name}} by ID
exports.update{{class.name}} = async (ctx) => {
  try {
    const {{lowercase class.name}} = await {{class.name}}.findByIdAndUpdate(ctx.params.id, ctx.request.body, { new: true });
    if (!{{lowercase class.name}}) {
      ctx.throw(404, '{{class.name}} not found');
    }
    ctx.body = {{lowercase class.name}};
  } catch (error) {
    ctx.throw(400, 'Invalid ID or data');
  }
};

// Delete a {{lowercase class.name}} by ID
exports.delete{{class.name}} = async (ctx) => {
  try {
    const {{lowercase class.name}} = await {{class.name}}.findByIdAndDelete(ctx.params.id);
    if (!{{lowercase class.name}}) {
      ctx.throw(404, '{{class.name}} not found');
    }
    ctx.status = 204;
  } catch (error) {
    ctx.throw(400, 'Invalid ID');
  }
};
