##output overwrite {{@root.output}}/frontend/src/components/{{class.packageDirPath}}{{class.name}}Form.js
{{#* inline "inputTag" ~}}
{{#ifBoth attrib.visibleToForm attrib.mantineInputTag}}
      <{{attrib.mantineInputTag}}
        label="{{attrib.mantineDataLabel}}"
{{#if (isdefined attrib.type.mantineAllowDecimal)}}
        allowDecimal={ {{attrib.type.mantineAllowDecimal}} }
{{/if}}
{{#if (isdefined attrib.type.mantineDecimalScale)}}
        decimalScale={ {{attrib.type.mantineDecimalScale}} }
{{/if}}
{{#if attrib.type.mantineFixedDecimalScale}}
        fixedDecimalScale
{{/if}}
{{#if (isdefined attrib.type.mantineValueFormat)}}
        valueFormat="{{attrib.type.mantineValueFormat}}"
{{/if}}
{{#if (isdefined attrib.type.mantineData)}}
        data={{{attrib.type.mantineData}}}
{{/if}}
  {{#if attrib.isRequired}}        
        required
  {{/if}}
        key={ form.key('{{varPrefix}}{{varName}}') }
        { ...form.getInputProps('{{varPrefix}}{{varName}}'
           {{~#if (isdefined attrib.type.mantineInputType)~}}
             , { type: '{{attrib.type.mantineInputType}}' }
            {{~/if}}) }
      />

{{/ifBoth}}
{{/inline~}}



{{~#* inline "inputObject" ~}}
{{#each attributes as |attrib|}}
{{#if attrib.isObject}}
     <Fieldset legend="{{attrib.mantineDataLabel}}">
{{> inputObject attributes=attrib.type.metaClass.attributes varPrefix=(concat ../varPrefix attrib.jsIdentifierName ".")}}
     </Fieldset>

{{else}}
{{> inputTag attrib=attrib varPrefix=../varPrefix varName=attrib.jsIdentifierName}}
{{/if}}
{{/each}}
{{/inline~}}


{{~#* inline "initialValues" ~}}
{{#each attributes as |attrib|}}
{{#if attrib.visibleToForm}}
{{#if attrib.isObject}}
{{../indent}}{{prefix}}{{attrib.jsIdentifierName}}: {
{{> initialValues attributes=attrib.type.metaClass.attributes prefix=(concat ../prefix attrib.jsIdentifierName ".") indent=(concat ../indent "    ")}}
{{../indent}} },
{{else}}
{{../indent}}{{prefix}}{{attrib.jsIdentifierName}}: {{{attrib.mantineDefaultValue}}},
{{/if}}
{{/if}}
{{/each}}
{{/inline~}}

// This file was generated with NodeMDA. It will be overwritten if generated again.
// Do not modify this file.
//
import React, { useState, useEffect } from 'react';
import { TextInput, NumberInput, PasswordInput, Checkbox, Select, MultiSelect, Button, Fieldset } from '@mantine/core';
import { DateInput, TimeInput } from '@mantine/dates';
import { useForm } from '@mantine/form';
import { fetch{{class.name}}ById, create{{class.name}}, update{{class.name}} } from '{{class.relativeParentPrefix}}/api/{{class.packageDirPath}}{{class.name}}Api';

const {{class.name}}Form = ({ {{lowercase class.name}}Id, onSave, onCancel }) => {

  const form = useForm({
    mode: 'uncontrolled',
    initialValues: {
{{> initialValues attributes=class.attributes indent="        " prefix=""}}
    },
    validate: {
    }
  });


  useEffect(() => {
    if ({{lowercase class.name}}Id) {
      // Load {{lowercase class.name}} data for editing
      fetch{{class.name}}ById({{lowercase class.name}}Id).then((data) => { 
        form.setValues(data);
        form.resetDirty(data);        
      });
    }
  }, [{{lowercase class.name}}Id]);


  const handleSubmit = (values) => {
    if ({{lowercase class.name}}Id) {
      update{{class.name}}({{lowercase class.name}}Id, values).then(onSave);
    } else {
      create{{class.name}}(values).then(onSave);
    }
  };


  return (
    <form onSubmit={form.onSubmit(handleSubmit)}>   
{{> inputObject attributes=class.attributes varPrefix=""}}
      <Button type="submit" mt="md">
        { {{lowercase class.name}}Id ? 'Update {{class.name}}' : 'Create {{class.name}}' }
      </Button>
      <Button type="button" mt="md" ml="md" variant="outline" onClick={onCancel}>
        Cancel
      </Button>
    </form>
  );
};

export default {{class.name}}Form;
