{{#with class as |class|}}
##output overwrite {{class.goPackagePath}}/{{class.goFileName}}.go
// Generated code - do not edit this file
package {{class.goPackageName}}

import (

	"gopkg.in/gin-gonic/gin.v1"

	"{{@root.goProjectPath}}}/app"

)


type {{class.goPrivateName}}Impl struct {
	// Any state variables, database connections, etc would go here.
}


func init() {

	var _ gin.H

    svc{{class.goName}} = {{class.goPrivateName}}Impl{}
}


{{#each class.operations as |op|}}
func (s {{class.goPrivateName}}Impl) {{op.goName}}({{#each op.parameters as |param|}}{{#unless @first}}, {{/unless}}{{param.goName}} {{param.goTypeName}}{{/each}}) (status int, result {{op.goReturnType}}, err error ) {

	db := app.GetDb()
	defer db.Close()

	panic("{{op.goName}} not yet implemented")
}
{{/each}}


{{/with}}