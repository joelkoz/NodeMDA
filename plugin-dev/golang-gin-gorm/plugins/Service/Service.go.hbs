{{#with class as |class|}}
##output overwrite {{class.goPackagePath}}/{{class.goFileName}}.go
// Generated code - do not edit this file
package {{class.goPackageName}}

import (
   "fmt"
   "gopkg.in/gin-gonic/gin.v1"
   "{{@root.goProjectPath}}/app"
)


type {{class.goName}} interface {

{{#each class.operations as |op|}}
    {{#each op.goCommentsFormatted as |cmt|}}
    // {{cmt}}
    {{/each}}
	{{op.goName}}({{#each op.parameters as |param|}}{{#unless @first}}, {{/unless}}{{param.goName}} {{param.goTypeName}}{{/each}}) (status int, result {{op.goReturnType}}, err error )
{{/each}}

}


// The implementation for {{class.goName}} is saved here
var svc{{class.goName}} {{class.goName}}


func init() {

	router := app.GetRouter()

	rgrp := router.Group("{{class.ginServicePath}}")
	{
{{#each class.operations as |op|}}	
		rgrp.GET("/{{op.goServiceName}}{{#each op.parameters as |param|}}/:{{param.goName}}{{/each}}", func(c *gin.Context) {

			defer func() {
				if r := recover(); r != nil {
      				err := fmt.Errorf("%v", r)
					c.JSON(500, gin.H{"status": 500, "error": err.Error()})
				}
			}()

{{#each op.parameters as |param|}}
			{{param.goName}} := c.Param("{{param.goName")
{{/each}}

			status, result, err := svc{{class.goName}}.{{op.goName}}({{#each op.parameters as |param|}}{{#unless @first}}, {{/unless}}{{param.goName}}{{/each}})
				var r gin.H
				if err != nil {
					r = gin.H{"status": status, "error": err.Error() }
				} else {
					r = gin.H{"status": status, "result": *result }
				}
				c.JSON(status, r)
		})


		rgrp.POST("/{{op.goServiceName}}", func(c *gin.Context) {

			defer func() {
				if r := recover(); r != nil {
      				err := fmt.Errorf("%v", r)
					c.JSON(500, gin.H{"status": 500, "error": err.Error()})
				}
			}()

			var person Person
			if c.Bind(&person) == nil {
				status, result, err := svc{{class.goName}}.SaveOrUpdate(&person)
				var r gin.H
				if err != nil {
					r = gin.H{"status": status, "error": err.Error() }
				} else {
					r = gin.H{"status": status, "result": *result }
				}
				c.JSON(status, r)
			}
		})

{{/each}}		
	}


}

{{/with}}
