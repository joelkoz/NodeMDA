{{#with class as |class|}}
##output overwrite {{class.goPackagePath}}/{{class.goFileName}}.go
// Generated code - do not edit this file
package {{class.goPackageName}}

import (
	"time"

{{#if class.hasImports}}
    "{{@root.goProjectPath}}/util"
{{/if}}
    "{{@root.gpProjectPath}}/app"

{{#each class.goImportList as |import|}}
	"{{import}}"
{{/each}}
)


{{#each class.goCommentsFormatted as |cmt|}}
// {{cmt}}
{{/each}}
type {{class.goName}} struct {
{{#if class.isSubClass}}
	{{class.parentClass.goTypeName}}
{{else}}
  	ID        uint `json:"id,omitempty" gorm:"primary_key"`
  	UpdatedAt time.Time `json:"-"`
{{/if}}

{{#each class.attributes as |attrib|}}
	{{attrib.goName}} {{attrib.goTypeName}} `json:"{{attrib.name}},omitempty"{{attrib.gormSpec}}`
{{/each}}	
}



func init() {
	app.RegisterEntity(&{{class.goName}}{})
}



{{#if class.hasOperations}}
type I{{class.goName}} interface {

{{#each class.operations as |op|}}
    {{#each op.goCommentsFormatted as |cmt|}}
    // {{cmt}}
    {{/each}}
	{{op.goName}}({{#each op.parameters as |param|}}{{#unless @first}}, {{/unless}}{{param.goName}} {{param.goTypeName}}{{/each}}) {{op.goReturnType}}
    
{{/each}}	
}



{{/if}}
{{#if class.hasEntityAttributes}}
// Loads records associated with the {{class.goName}} record. If rels
// are specified, they are assumed to be names of fields from 
// the {{class.goName}} record. If no rels are specified, ALL
// relationships are loaded.
func (entity *{{class.goName}}) loadAssoc(rels ...string) (err error) {

	db := app.GetDb()
	defer db.Close()

{{#each class.entityAttributes as |attrib|}}
	if len(rels) == 0 || util.Sslice(rels).Contains("{{attrib.goName}}") {
		ref := {{attrib.goTypeName}}{}
		err = db.Model(entity).Related(&ref).Error
		if err != nil {
			return
		} else if !db.NewRecord(ref) {
			entity.{{attrib.goName}} = ref
		}
	}

{{/each}}
	return
}
{{/if}}
{{/with}}
