{{#* inline "methodDeclaration"}}
/**
{{#each methodComment as |cmtLine|}}
 * {{{cmtLine}}}
{{/each~}}
  {{~#each varList as |varDef|}}
 * @param { {{varDef.type.csTypeName}}{{#if varDef.isArray}}[]{{/if}} } {{varDef.name}}{{#if varDef.hasComment}} - {{{varDef.comment}}}{{/if}}{{#if varDef.isReadOnly}} (read only){{/if}}
  {{/each}}
{{#if returnType}}
* @returns { {{returnType}} }
{{/if}} 
 */
{{#if virt}}virtual {{/if}}public {{#if isStatic}}static {{/if}}{{returnType}} {{methodName}}({{#each varList as |varDef|}}{{#unless @first}}, {{/unless}}{{varDef.type.csTypeName}} {{varDef.name}}{{#if varDef.hasDefaultValue}} = {{{varDef.defaultValue}}}{{/if}}{{/each}}) 
{
{{/inline}}
{{#with class as |class|}}

// This file was generated with NodeMDA. It will be overwritten if generated again.
// Do not modify this file.
{{#if class.hasOperations}}
// Instead, add your customizations to {{name}}Impl.cs
{{/if}}
{{#if class.hasEntityMembers}}
using LiteDB;
{{/if}}
{{#if class.hasArrayAttribs}}
using System.Collections.Generic;
{{/if}}
{{#each class.foreignNamespaces as |fNamespace|}}
using {{fNamespace}};
{{/each}}

namespace {{class.Namespace}}
{
{{#if class.hasComment}}
/**
{{#each class.jsCommentsFormatted as |cmtLine|}}
* {{{cmtLine}}}
{{/each}}
*/
{{/if}}
    public class {{class.name}}{{#if class.isSubClass}} : {{parentClassType.className}}{{/if}}
    {

        {{> methodDeclaration methodName=class.name varList=class.allRequiredAttributes methodComment="@constructor"}}
          {{#if class.isSubClass}}
              base(
                   {{~#each class.inheritedRequiredAttributes as |attrib|}}
                   {{~#unless @first}}, {{/unless}}{{attrib.name~}}
                   {{/each~}}
                  );
          {{/if}}
        }

      {{#if class.autogenPrimaryKey}}
        public int id { get; set; }
      {{/if}}
        

      {{~#each class.attributes as |attrib|}}
        {{#if attrib.bsonIgnore}}

        [BsonIgnore]
        {{/if}}
        {{#if attrib.bsonRef}}

        [BsonRef("{{attrib.type.metaClass.schemaCollectionName}}")]
        {{/if}}
        {{#unless attrib.isArray}}
        public {{attrib.type.csTypeName}} {{attrib.name}} { get;{{#unless attrib.isReadOnly}} set;{{/unless}} }
        {{else}}
        public List<{{attrib.type.csTypeName}}> {{attrib.name}} { get;{{#unless attrib.isReadOnly}} set;{{/unless}} }
        {{/unless}}
      {{/each}}

   {{#each operations as |fn|}}
   
      {{> methodDeclaration methodName=fn.name varList=fn.parameters methodComment=fn.jsCommentsFormatted returnType=fn.csReturnType virt=true}}
          throw new NotImplementedException("Operation {{fn.name}} not yet implemented.");
      }   
   {{/each}}
   };

{{/with}}
}
