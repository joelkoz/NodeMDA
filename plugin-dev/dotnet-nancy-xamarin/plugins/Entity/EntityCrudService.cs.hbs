##output preserve {{class.ServerNamespaceSourceDir}}/{{class.name}}CrudService.cs
{{#with class as |class|}}
using System;
using System.Collections.Generic;
using {{class.Namespace}};

namespace {{class.ServerNamespace}}
{

    public class {{class.name}}CrudService : AbstractCrudService<{{class.name}}>
    {
        public {{class.name}}CrudService() : base("/{{class.entityVarName}}")
        {
        }

        public override {{class.name}} Create({{class.name}} entity)
        {
            return {{class.name}}Dao.Create(entity);
        }

        public override bool Delete(int id)
        {
            return {{class.name}}Dao.Delete(id);
        }

        public override {{class.name}} Find(int id, bool loadRelated = true)
        {
            return {{class.name}}Dao.Find(id{{#if class.hasEntityMembers}}, loadRelated{{/if}});
        }

        override public {{class.name}}[] FindAll()
        {
            var results = {{class.name}}Dao.FindAll();

            var list = new List<{{class.name}}>();
            list.AddRange(results);

            return list.ToArray();
        }


        public override {{class.name}} Update({{class.name}} entity)
        {
            return {{class.name}}Dao.Merge(entity);
        }


        protected override {{class.name}} Update(int id, {{class.name}} entity)
        {
            if (id != 0) {
                if (entity.id != id) {
                    throw new ArgumentException("{{class.name}} id does not match specified Url id");
                }
                else {
                    entity.id = id;
                }
            }

            return this.Update(entity);
        }
    }
}
{{/with}}